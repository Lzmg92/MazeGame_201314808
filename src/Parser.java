
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 02 17:56:02 CST 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 02 17:56:02 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

    Datos d = new Datos();

  /** Default constructor. */
  public Parser() {super();}


  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\033\002\000\002" +
    "\007\011\000\002\034\002\000\002\022\006\000\002\035" +
    "\002\000\002\036\002\000\002\037\002\000\002\024\014" +
    "\000\002\040\002\000\002\041\002\000\002\042\002\000" +
    "\002\024\014\000\002\023\005\000\002\023\003\000\002" +
    "\043\002\000\002\006\007\000\002\044\002\000\002\011" +
    "\007\000\002\045\002\000\002\012\010\000\002\010\004" +
    "\000\002\046\002\000\002\013\005\000\002\047\002\000" +
    "\002\013\005\000\002\050\002\000\002\025\006\000\002" +
    "\051\002\000\002\052\002\000\002\053\002\000\002\054" +
    "\002\000\002\055\002\000\002\056\002\000\002\027\020" +
    "\000\002\026\005\000\002\026\003\000\002\057\002\000" +
    "\002\014\005\000\002\060\002\000\002\014\005\000\002" +
    "\061\002\000\002\015\005\000\002\062\002\000\002\015" +
    "\005\000\002\063\002\000\002\030\006\000\002\064\002" +
    "\000\002\065\002\000\002\066\002\000\002\021\011\000" +
    "\002\067\002\000\002\070\002\000\002\016\013\000\002" +
    "\071\002\000\002\017\006\000\002\072\002\000\002\073" +
    "\002\000\002\020\014\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\031\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\004\004\001\002\000\010\005\017\006" +
    "\020\007\013\001\002\000\004\002\011\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffe\004\004\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\006" +
    "\005\017\006\020\001\002\000\004\032\uffca\001\002\000" +
    "\004\010\145\001\002\000\006\005\017\007\013\001\002" +
    "\000\006\006\020\007\013\001\002\000\004\032\ufff4\001" +
    "\002\000\004\032\uffdd\001\002\000\004\032\023\001\002" +
    "\000\004\012\103\001\002\000\004\014\uffdb\001\002\000" +
    "\006\012\uffd3\034\025\001\002\000\004\032\023\001\002" +
    "\000\004\012\uffd4\001\002\000\004\014\031\001\002\000" +
    "\004\015\uffda\001\002\000\004\036\032\001\002\000\004" +
    "\041\033\001\002\000\004\035\uffe8\001\002\000\004\035" +
    "\035\001\002\000\004\015\uffe7\001\002\000\004\015\040" +
    "\001\002\000\004\016\uffd9\001\002\000\004\036\041\001" +
    "\002\000\004\040\042\001\002\000\004\037\043\001\002" +
    "\000\004\044\044\001\002\000\004\035\ufff6\001\002\000" +
    "\004\035\046\001\002\000\012\014\ufff5\016\ufff5\017\ufff5" +
    "\033\ufff5\001\002\000\004\016\051\001\002\000\004\022" +
    "\uffd8\001\002\000\004\036\052\001\002\000\004\043\053" +
    "\001\002\000\004\035\uffe6\001\002\000\004\035\055\001" +
    "\002\000\004\022\uffe5\001\002\000\004\022\057\001\002" +
    "\000\004\036\076\001\002\000\004\017\uffd7\001\002\000" +
    "\004\017\062\001\002\000\004\036\075\001\002\000\006" +
    "\020\065\021\064\001\002\000\004\035\uffdf\001\002\000" +
    "\004\035\uffe1\001\002\000\004\033\uffd6\001\002\000\004" +
    "\033\070\001\002\000\006\012\uffd5\034\uffd5\001\002\000" +
    "\004\035\072\001\002\000\004\033\uffe0\001\002\000\004" +
    "\035\074\001\002\000\004\033\uffde\001\002\000\020\020" +
    "\uffe2\021\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\001\002\000\004\040\077\001\002\000\004\044\100\001" +
    "\002\000\004\035\uffe4\001\002\000\004\035\102\001\002" +
    "\000\004\017\uffe3\001\002\000\010\005\uffdc\007\uffdc\010" +
    "\uffdc\001\002\000\004\032\106\001\002\000\004\011\134" +
    "\001\002\000\006\014\ufff2\015\uffee\001\002\000\006\011" +
    "\uffe9\034\110\001\002\000\004\032\106\001\002\000\004" +
    "\011\uffea\001\002\000\004\014\124\001\002\000\004\015" +
    "\040\001\002\000\004\014\uffed\001\002\000\004\014\116" +
    "\001\002\000\004\036\117\001\002\000\004\042\120\001" +
    "\002\000\004\035\uffec\001\002\000\004\035\122\001\002" +
    "\000\004\033\123\001\002\000\006\011\uffeb\034\uffeb\001" +
    "\002\000\004\036\125\001\002\000\004\042\126\001\002" +
    "\000\004\035\ufff1\001\002\000\004\035\130\001\002\000" +
    "\004\015\040\001\002\000\004\033\ufff0\001\002\000\004" +
    "\033\133\001\002\000\006\011\uffef\034\uffef\001\002\000" +
    "\010\006\ufff3\007\ufff3\010\ufff3\001\002\000\004\006\020" +
    "\001\002\000\004\007\013\001\002\000\004\010\ufffc\001" +
    "\002\000\004\010\ufffb\001\002\000\004\005\017\001\002" +
    "\000\004\007\013\001\002\000\004\010\ufffa\001\002\000" +
    "\004\010\ufff9\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\032\150\001\002\000\014\025\167\026\170\027" +
    "\175\030\173\031\171\001\002\000\004\014\uffc8\001\002" +
    "\000\006\013\uffbc\034\uffbc\001\002\000\006\013\uffb8\034" +
    "\157\001\002\000\006\013\uffbb\034\uffbb\001\002\000\004" +
    "\013\156\001\002\000\006\013\uffba\034\uffba\001\002\000" +
    "\010\005\uffc9\006\uffc9\010\uffc9\001\002\000\004\032\150" +
    "\001\002\000\004\013\uffb9\001\002\000\004\014\031\001" +
    "\002\000\004\015\uffc7\001\002\000\004\015\040\001\002" +
    "\000\004\017\uffc6\001\002\000\004\017\062\001\002\000" +
    "\014\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\001\002" +
    "\000\004\035\uffce\001\002\000\004\035\uffd2\001\002\000" +
    "\004\035\uffd0\001\002\000\004\033\uffc1\001\002\000\004" +
    "\035\uffbf\001\002\000\004\023\uffc4\001\002\000\004\035" +
    "\uffcc\001\002\000\004\035\177\001\002\000\004\033\uffcb" +
    "\001\002\000\004\023\201\001\002\000\004\036\202\001" +
    "\002\000\004\043\203\001\002\000\004\035\uffc3\001\002" +
    "\000\004\035\205\001\002\000\004\033\206\001\002\000" +
    "\006\013\uffc2\034\uffc2\001\002\000\004\035\210\001\002" +
    "\000\004\024\211\001\002\000\004\036\212\001\002\000" +
    "\004\043\213\001\002\000\004\035\uffbe\001\002\000\004" +
    "\035\215\001\002\000\004\033\216\001\002\000\006\013" +
    "\uffbd\034\uffbd\001\002\000\004\033\220\001\002\000\006" +
    "\013\uffc0\034\uffc0\001\002\000\004\035\222\001\002\000" +
    "\004\023\uffcf\001\002\000\004\035\224\001\002\000\004" +
    "\023\uffd1\001\002\000\004\035\226\001\002\000\004\033" +
    "\uffcd\001\002\000\004\005\017\001\002\000\004\006\020" +
    "\001\002\000\004\010\ufff8\001\002\000\004\010\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\004\003\005\004\006\001\001\000" +
    "\012\005\013\022\015\025\014\030\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\007\004\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\227" +
    "\025\226\001\001\000\004\063\145\001\001\000\002\001" +
    "\001\000\006\022\141\030\140\001\001\000\006\025\135" +
    "\030\134\001\001\000\004\034\103\001\001\000\004\050" +
    "\020\001\001\000\006\026\021\027\023\001\001\000\002" +
    "\001\001\000\004\051\026\001\001\000\002\001\001\000" +
    "\006\026\025\027\023\001\001\000\002\001\001\000\004" +
    "\006\027\001\001\000\004\052\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\036\001\001\000" +
    "\004\053\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\047" +
    "\001\001\000\004\054\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\057\001\001\000\002\001" +
    "\001\000\004\055\060\001\001\000\004\010\062\001\001" +
    "\000\002\001\001\000\004\013\065\001\001\000\004\047" +
    "\072\001\001\000\004\046\070\001\001\000\004\056\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\104\024\106\001\001\000" +
    "\002\001\001\000\006\035\111\040\112\001\001\000\002" +
    "\001\001\000\006\023\110\024\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\113\001\001\000\004" +
    "\041\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\126\001\001\000\002\001\001" +
    "\000\004\007\130\001\001\000\004\037\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\137\001\001\000\004\030\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\143\001\001\000\004" +
    "\030\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\150\017\152\020\154\021\146" +
    "\031\153\032\151\001\001\000\006\014\173\015\171\001" +
    "\001\000\004\064\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\150\017\152\020\154" +
    "\021\146\031\157\032\151\001\001\000\002\001\001\000" +
    "\004\006\161\001\001\000\004\065\162\001\001\000\004" +
    "\007\163\001\001\000\004\066\164\001\001\000\004\010" +
    "\165\001\001\000\002\001\001\000\004\061\224\001\001" +
    "\000\004\057\222\001\001\000\004\060\220\001\001\000" +
    "\004\071\216\001\001\000\004\072\206\001\001\000\004" +
    "\067\177\001\001\000\004\062\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\231\001\001\000\004\025\230\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );

        d.errores = d.errores +"\n"+"Error SINTACTICO en la Línea: " + (s.right+1) +" Columna: "+s.left+ ". Identificador: "
                +s.value ;
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sin rec en la Línea " + (s.right+1)+ " Columna "+s.left+ ". Identificador " +
        s.value + " no reconocido.");
        d.errores = d.errores +"\n"+"Error SINTACTICO sin recuperacion en la Línea: " + (s.right+1) +" Columna: "+s.left+ ". Identificador: "
                +s.value ;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


Datos d = new Datos();
int nf = 0;
int np = 0;
int ne = 0;
String rutatemp = "/";
String nombretemp = "";
String descrtemp = "";
String tipotemp = "";
int vidatemp = 0;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CDES ::= DDES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CDES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CDES ::= DDES coma CDES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CDES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DDES ::= BONUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DDES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DDES ::= MEBL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DDES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DDES ::= BOAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DDES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BONUS ::= INIDDES tbonus NT$31 pycoma creditos igual numero NT$32 pycoma llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 ne++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BONUS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 d.ListaExtras.get(ne).setPuntos(Integer.parseInt(nu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$31 ::= 
            {
              Object RESULT =null;
 d.ListaExtras.get(ne).setTipo("bonus"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MEBL ::= INIDDES TIPD2 NT$30 llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ne++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MEBL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$30 ::= 
            {
              Object RESULT =null;
 d.ListaExtras.get(ne).setTipo(tipotemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOAR ::= INIDDES TIPD1 NT$28 destruir igual numero NT$29 pycoma llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 ne++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOAR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 d.ListaExtras.get(ne).setPuntos(Integer.parseInt(nu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$28 ::= 
            {
              Object RESULT =null;
 d.ListaExtras.get(ne).setTipo(tipotemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INIDDES ::= llavea NT$25 NOMBRE NT$26 IMAGEN NT$27 TIPO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIDDES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaExtras.get(ne).setRuta(rutatemp); rutatemp = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaExtras.get(ne).setNombre(nombretemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$25 ::= 
            {
              Object RESULT =null;
 d.ListaExtras.add(new NodoExtras("","","",0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DES ::= adesign NT$24 CDES cdesign 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$24 ::= 
            {
              Object RESULT =null;
 System.out.println("abredes"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPD2 ::= tbloque NT$23 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPD2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$23 ::= 
            {
              Object RESULT =null;
 tipotemp = "bloque"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPD2 ::= tmeta NT$22 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPD2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$22 ::= 
            {
              Object RESULT =null;
 tipotemp = "meta"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPD1 ::= tarma NT$21 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPD1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$21 ::= 
            {
              Object RESULT =null;
 tipotemp = "arma"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPD1 ::= tbomba NT$20 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPD1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$20 ::= 
            {
              Object RESULT =null;
 tipotemp = "bomba"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CFIG ::= DFIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CFIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CFIG ::= DFIG coma CFIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CFIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DFIG ::= llavea NT$14 NOMBRE NT$15 IMAGEN NT$16 VIDA NT$17 DESCRIP NT$18 TIPO TIPF NT$19 llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 np++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DFIG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 d.ListaPersonajes.get(np).setTipo(tipotemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaPersonajes.get(np).setDescripcion(descrtemp); descrtemp = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaPersonajes.get(np).setVida(vidatemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaPersonajes.get(np).setRuta(rutatemp); rutatemp = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 d.ListaPersonajes.get(np).setNombre(nombretemp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$14 ::= 
            {
              Object RESULT =null;
 d.ListaPersonajes.add(new NodoPersonaje("","",0,"",""));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FIG ::= afigure NT$13 CFIG cfigure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIG",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("abrefig"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPF ::= tvillano NT$12 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =null;
 tipotemp = "villano"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPF ::= theroe NT$11 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              Object RESULT =null;
 tipotemp = "heroe"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= tipo igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DESCRIP ::= descripcion igual astring sstring NT$10 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESCRIP",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 char[] ar = st.toCharArray();
                                                     for(int i=0; i<ar.length-1;i++){descrtemp = descrtemp + ar[i];} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VIDA ::= vida igual numero NT$9 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VIDA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 vidatemp =  Integer.parseInt(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NOMBRE ::= nombre igual oracion NT$8 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 nombretemp = nom; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CBCKG ::= DBCKG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CBCKG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CBCKG ::= DBCKG coma CBCKG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CBCKG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DBCKG ::= llavea NT$5 IMAGEN NT$6 nombre igual nombrefo NT$7 pycoma llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 nf++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DBCKG",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  d.ListaFondos.get(nf).setNombre(nomf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
  d.ListaFondos.get(nf).setRuta(rutatemp); rutatemp = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
  d.ListaFondos.add(new NodoFondo("","")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DBCKG ::= llavea NT$2 nombre igual nombrefo NT$3 pycoma IMAGEN NT$4 llavec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 nf++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DBCKG",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
  d.ListaFondos.get(nf).setRuta(rutatemp); rutatemp = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  d.ListaFondos.get(nf).setNombre(nomf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
  d.ListaFondos.add(new NodoFondo("","")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BCKG ::= abackground NT$1 CBCKG cbackground 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BCKG",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("abrebck"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMAGEN ::= imagen igual astring adireccion sstring NT$0 pycoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 char[] ar = st.toCharArray();
                                                          for(int i=0; i<ar.length-1;i++){rutatemp = rutatemp + ar[i];}
                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EST ::= DES FIG BCKG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EST ::= DES BCKG FIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EST ::= FIG DES BCKG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EST ::= FIG BCKG DES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EST ::= BCKG DES FIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EST ::= BCKG FIG DES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // C ::= aconfig EST cconfig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONF ::= C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONF",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONF ::= C CONF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONF",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= CONF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

