/* The following code was generated by JFlex 1.4.3 on 2/04/15 05:55 PM */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/04/15 05:55 PM from the specification file
 * <tt>Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

    Datos d = new Datos();

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\47\1\0\2\47\22\0\1\5\1\0\1\11\11\0"+
    "\1\10\1\34\1\2\1\7\12\1\1\4\1\45\1\12\1\46\1\25"+
    "\2\0\1\23\1\26\1\13\1\30\1\31\1\16\1\20\1\40\1\17"+
    "\1\3\1\27\1\41\1\35\1\15\1\14\1\36\1\42\1\22\1\32"+
    "\1\24\1\21\1\37\1\3\1\33\2\3\4\0\1\6\1\0\1\23"+
    "\1\26\1\13\1\30\1\31\1\16\1\20\1\40\1\17\1\3\1\27"+
    "\1\41\1\35\1\15\1\14\1\36\1\42\1\22\1\32\1\24\1\21"+
    "\1\37\1\3\1\33\2\3\1\43\1\0\1\44\123\0\1\3\37\0"+
    "\1\3\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\3\1\10\1\11\1\12\1\13\1\2\2\3"+
    "\1\14\6\0\1\15\22\0\1\15\63\0\1\16\1\17"+
    "\5\0\1\20\1\21\15\0\1\22\1\23\4\0\1\24"+
    "\5\0\1\25\1\0\1\26\1\0\1\27\1\30\1\31"+
    "\4\0\1\32\1\0\1\33\5\0\1\34\4\0\1\35"+
    "\1\0\1\36\10\0\1\37\2\0\1\40\1\0\1\41"+
    "\3\0\1\42\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\50\0\50\0\50"+
    "\0\310\0\360\0\50\0\50\0\50\0\50\0\u0118\0\u0140"+
    "\0\u0168\0\50\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18"+
    "\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58"+
    "\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\50"+
    "\0\50\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\50\0\50"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\50\0\50\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\50\0\u1108\0\u1130\0\u1158\0\u1180"+
    "\0\u11a8\0\50\0\u11d0\0\50\0\u11f8\0\50\0\50\0\50"+
    "\0\u1220\0\u1248\0\u1270\0\u1298\0\50\0\u12c0\0\50\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\50\0\u13b0\0\u13d8\0\u1400"+
    "\0\u1428\0\50\0\u1450\0\50\0\u1478\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\50\0\u15b8\0\u15e0\0\50"+
    "\0\u1608\0\50\0\u1630\0\u1658\0\u1680\0\50\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\12\4\1\2\5\4\1\12\1\2"+
    "\6\4\1\13\1\14\1\15\1\16\1\5\51\0\1\3"+
    "\1\17\46\0\2\20\1\4\2\20\1\21\2\20\1\22"+
    "\1\0\12\4\1\0\6\4\1\0\6\4\12\0\1\5"+
    "\41\0\1\5\7\0\1\23\3\0\1\24\2\0\1\25"+
    "\7\0\1\26\1\0\1\27\20\0\2\20\1\4\2\20"+
    "\1\21\2\20\1\22\1\0\12\4\1\0\6\4\1\30"+
    "\6\4\6\0\1\17\47\0\10\20\1\22\1\0\12\20"+
    "\1\0\6\20\1\0\6\20\6\0\1\31\7\20\1\22"+
    "\1\0\12\20\1\0\6\20\1\0\6\20\20\0\1\32"+
    "\2\0\1\33\7\0\1\34\1\0\1\35\33\0\1\36"+
    "\52\0\1\37\53\0\1\40\55\0\1\41\31\0\1\42"+
    "\1\0\1\43\1\0\1\44\3\0\1\45\1\46\1\0"+
    "\1\47\1\0\1\50\4\0\1\51\1\0\1\52\1\53"+
    "\10\0\1\31\1\54\6\20\1\22\1\0\12\20\1\0"+
    "\6\20\1\0\6\20\21\0\1\55\52\0\1\56\53\0"+
    "\1\57\55\0\1\60\33\0\1\61\52\0\1\62\42\0"+
    "\1\63\66\0\1\64\37\0\1\65\41\0\1\66\70\0"+
    "\1\67\34\0\1\70\44\0\1\71\44\0\1\72\24\0"+
    "\1\73\37\0\1\74\47\0\1\75\35\0\1\76\61\0"+
    "\1\77\17\0\1\54\7\20\1\22\1\0\12\20\1\0"+
    "\6\20\1\0\6\20\22\0\1\100\52\0\1\101\42\0"+
    "\1\102\66\0\1\103\33\0\1\104\52\0\1\105\55\0"+
    "\1\106\37\0\1\107\61\0\1\110\53\0\1\111\35\0"+
    "\1\112\61\0\1\113\50\0\1\114\26\0\1\115\17\0"+
    "\1\116\26\0\1\117\65\0\1\120\41\0\1\121\53\0"+
    "\1\122\10\0\1\123\30\0\1\124\43\0\1\125\52\0"+
    "\1\126\55\0\1\127\37\0\1\130\47\0\1\131\52\0"+
    "\1\132\45\0\1\133\47\0\1\134\57\0\1\135\45\0"+
    "\1\136\41\0\1\137\52\0\1\140\40\0\1\141\54\0"+
    "\1\142\54\0\1\143\63\0\1\144\20\0\1\145\10\0"+
    "\1\146\46\0\1\147\47\0\1\150\65\0\1\151\22\0"+
    "\1\152\52\0\1\153\52\0\1\154\45\0\1\155\47\0"+
    "\1\156\47\0\1\157\60\0\1\160\40\0\1\161\42\0"+
    "\1\162\51\0\1\163\52\0\1\164\56\0\1\165\50\0"+
    "\1\166\40\0\1\167\45\0\1\170\50\0\1\171\47\0"+
    "\1\172\50\0\1\173\55\0\1\174\36\0\1\175\60\0"+
    "\1\176\40\0\1\177\42\0\1\200\53\0\1\201\53\0"+
    "\1\202\36\0\1\203\60\0\1\204\46\0\1\205\54\0"+
    "\1\206\33\0\1\207\63\0\1\210\35\0\1\211\51\0"+
    "\1\212\43\0\1\213\53\0\1\214\53\0\1\215\36\0"+
    "\1\216\60\0\1\217\44\0\1\220\46\0\1\221\42\0"+
    "\1\222\71\0\1\223\30\0\1\224\44\0\1\225\55\0"+
    "\1\226\46\0\1\227\51\0\1\230\41\0\1\231\64\0"+
    "\1\232\30\0\1\233\56\0\1\234\50\0\1\235\41\0"+
    "\1\236\56\0\1\237\53\0\1\240\36\0\1\241\54\0"+
    "\1\242\53\0\1\243\36\0\1\244\55\0\1\245\36\0"+
    "\1\246\52\0\1\247\55\0\1\250\36\0\1\251\50\0"+
    "\1\252\46\0\1\253\50\0\1\254\47\0\1\255\57\0"+
    "\1\256\47\0\1\257\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\2\1\4\11\3\1\1\11"+
    "\6\0\1\1\22\0\1\1\63\0\2\11\5\0\2\11"+
    "\15\0\2\11\4\0\1\11\5\0\1\11\1\0\1\11"+
    "\1\0\3\11\4\0\1\11\1\0\1\11\5\0\1\11"+
    "\4\0\1\11\1\0\1\11\10\0\1\11\2\0\1\11"+
    "\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return new Symbol(simbolo.astring, yychar,yyline);
          }
        case 36: break;
        case 29: 
          { return new Symbol(simbolo.creditos, yychar,yyline);
          }
        case 37: break;
        case 23: 
          { return new Symbol(simbolo.nombre, yychar,yyline);
          }
        case 38: break;
        case 22: 
          { return new Symbol(simbolo.adesign, yychar,yyline);
          }
        case 39: break;
        case 19: 
          { return new Symbol(simbolo.tbomba, yychar,yyline);
          }
        case 40: break;
        case 17: 
          { return new Symbol(simbolo.vida, yychar,yyline);
          }
        case 41: break;
        case 9: 
          { return new Symbol(simbolo.llavec, yychar,yyline);
          }
        case 42: break;
        case 20: 
          { return new Symbol(simbolo.theroe, yychar,yyline);
          }
        case 43: break;
        case 30: 
          { return new Symbol(simbolo.destruir, yychar,yyline);
          }
        case 44: break;
        case 5: 
          { return new Symbol(simbolo.adireccion, yychar,yyline);
          }
        case 45: break;
        case 27: 
          { return new Symbol(simbolo.cdesign, yychar,yyline);
          }
        case 46: break;
        case 11: 
          { return new Symbol(simbolo.igual, yychar,yyline);
          }
        case 47: break;
        case 3: 
          { return new Symbol(simbolo.oracion, yychar,yyline, new String(yytext()));
          }
        case 48: break;
        case 16: 
          { return new Symbol(simbolo.tmeta, yychar,yyline);
          }
        case 49: break;
        case 18: 
          { return new Symbol(simbolo.tbonus, yychar,yyline);
          }
        case 50: break;
        case 12: 
          { return new Symbol(simbolo.sstring, yychar, yyline, new String(yytext()));
          }
        case 51: break;
        case 15: 
          { return new Symbol(simbolo.tipo, yychar,yyline);
          }
        case 52: break;
        case 24: 
          { return new Symbol(simbolo.imagen, yychar,yyline);
          }
        case 53: break;
        case 21: 
          { return new Symbol(simbolo.afigure, yychar,yyline);
          }
        case 54: break;
        case 10: 
          { return new Symbol(simbolo.pycoma, yychar,yyline);
          }
        case 55: break;
        case 4: 
          { /* Se ignoran */
          }
        case 56: break;
        case 32: 
          { return new Symbol(simbolo.cbackground, yychar,yyline);
          }
        case 57: break;
        case 31: 
          { return new Symbol(simbolo.abackground, yychar,yyline);
          }
        case 58: break;
        case 2: 
          { return new Symbol(simbolo.numero, yychar, yyline, new String(yytext()));
          }
        case 59: break;
        case 28: 
          { return new Symbol(simbolo.tvillano, yychar,yyline);
          }
        case 60: break;
        case 26: 
          { return new Symbol(simbolo.cfigure, yychar,yyline);
          }
        case 61: break;
        case 33: 
          { return new Symbol(simbolo.descripcion, yychar,yyline);
          }
        case 62: break;
        case 14: 
          { return new Symbol(simbolo.tarma, yychar,yyline);
          }
        case 63: break;
        case 34: 
          { return new Symbol(simbolo.aconfig, yychar,yyline);
          }
        case 64: break;
        case 25: 
          { return new Symbol(simbolo.tbloque, yychar,yyline);
          }
        case 65: break;
        case 8: 
          { return new Symbol(simbolo.llavea, yychar,yyline);
          }
        case 66: break;
        case 1: 
          { System.out.println("Error lexico: "+yytext());
              d.errores = d.errores + "\nError LEXICO "+yytext()+" en linea "+yyline;
          }
        case 67: break;
        case 13: 
          { return new Symbol(simbolo.nombrefo, yychar,yyline, new String(yytext()));
          }
        case 68: break;
        case 6: 
          { return new Symbol(simbolo.coma, yychar,yyline);
          }
        case 69: break;
        case 35: 
          { return new Symbol(simbolo.cconfig, yychar,yyline);
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
